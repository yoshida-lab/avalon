// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryTaskClient is the client API for QueryTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryTaskClient interface {
	GetTaskId(ctx context.Context, in *TaskRoot, opts ...grpc.CallOption) (*TaskId, error)
	GetTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
}

type queryTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryTaskClient(cc grpc.ClientConnInterface) QueryTaskClient {
	return &queryTaskClient{cc}
}

func (c *queryTaskClient) GetTaskId(ctx context.Context, in *TaskRoot, opts ...grpc.CallOption) (*TaskId, error) {
	out := new(TaskId)
	err := c.cc.Invoke(ctx, "/task.QueryTask/GetTaskId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryTaskClient) GetTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/task.QueryTask/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryTaskServer is the server API for QueryTask service.
// All implementations must embed UnimplementedQueryTaskServer
// for forward compatibility
type QueryTaskServer interface {
	GetTaskId(context.Context, *TaskRoot) (*TaskId, error)
	GetTask(context.Context, *TaskId) (*Task, error)
	mustEmbedUnimplementedQueryTaskServer()
}

// UnimplementedQueryTaskServer must be embedded to have forward compatible implementations.
type UnimplementedQueryTaskServer struct {
}

func (UnimplementedQueryTaskServer) GetTaskId(context.Context, *TaskRoot) (*TaskId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskId not implemented")
}
func (UnimplementedQueryTaskServer) GetTask(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedQueryTaskServer) mustEmbedUnimplementedQueryTaskServer() {}

// UnsafeQueryTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryTaskServer will
// result in compilation errors.
type UnsafeQueryTaskServer interface {
	mustEmbedUnimplementedQueryTaskServer()
}

func RegisterQueryTaskServer(s grpc.ServiceRegistrar, srv QueryTaskServer) {
	s.RegisterService(&QueryTask_ServiceDesc, srv)
}

func _QueryTask_GetTaskId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryTaskServer).GetTaskId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.QueryTask/GetTaskId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryTaskServer).GetTaskId(ctx, req.(*TaskRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryTask_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryTaskServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.QueryTask/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryTaskServer).GetTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryTask_ServiceDesc is the grpc.ServiceDesc for QueryTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.QueryTask",
	HandlerType: (*QueryTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskId",
			Handler:    _QueryTask_GetTaskId_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _QueryTask_GetTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/task/task.protobuf",
}
