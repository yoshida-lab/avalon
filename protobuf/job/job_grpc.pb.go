// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package job

import (
	context "context"
	task "github.com/yoshida-lab/avalon/protobuf/task"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryJobClient is the client API for QueryJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryJobClient interface {
	GetJobs(ctx context.Context, in *task.TaskId, opts ...grpc.CallOption) (*JobList, error)
	GetJobIds(ctx context.Context, in *task.TaskId, opts ...grpc.CallOption) (*JobIds, error)
	GetJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Job, error)
}

type queryJobClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryJobClient(cc grpc.ClientConnInterface) QueryJobClient {
	return &queryJobClient{cc}
}

func (c *queryJobClient) GetJobs(ctx context.Context, in *task.TaskId, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/job.QueryJob/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryJobClient) GetJobIds(ctx context.Context, in *task.TaskId, opts ...grpc.CallOption) (*JobIds, error) {
	out := new(JobIds)
	err := c.cc.Invoke(ctx, "/job.QueryJob/GetJobIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryJobClient) GetJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/job.QueryJob/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryJobServer is the server API for QueryJob service.
// All implementations must embed UnimplementedQueryJobServer
// for forward compatibility
type QueryJobServer interface {
	GetJobs(context.Context, *task.TaskId) (*JobList, error)
	GetJobIds(context.Context, *task.TaskId) (*JobIds, error)
	GetJob(context.Context, *JobId) (*Job, error)
	mustEmbedUnimplementedQueryJobServer()
}

// UnimplementedQueryJobServer must be embedded to have forward compatible implementations.
type UnimplementedQueryJobServer struct {
}

func (UnimplementedQueryJobServer) GetJobs(context.Context, *task.TaskId) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedQueryJobServer) GetJobIds(context.Context, *task.TaskId) (*JobIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobIds not implemented")
}
func (UnimplementedQueryJobServer) GetJob(context.Context, *JobId) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedQueryJobServer) mustEmbedUnimplementedQueryJobServer() {}

// UnsafeQueryJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryJobServer will
// result in compilation errors.
type UnsafeQueryJobServer interface {
	mustEmbedUnimplementedQueryJobServer()
}

func RegisterQueryJobServer(s grpc.ServiceRegistrar, srv QueryJobServer) {
	s.RegisterService(&QueryJob_ServiceDesc, srv)
}

func _QueryJob_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryJobServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.QueryJob/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryJobServer).GetJobs(ctx, req.(*task.TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryJob_GetJobIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryJobServer).GetJobIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.QueryJob/GetJobIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryJobServer).GetJobIds(ctx, req.(*task.TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryJob_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryJobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.QueryJob/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryJobServer).GetJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryJob_ServiceDesc is the grpc.ServiceDesc for QueryJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.QueryJob",
	HandlerType: (*QueryJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobs",
			Handler:    _QueryJob_GetJobs_Handler,
		},
		{
			MethodName: "GetJobIds",
			Handler:    _QueryJob_GetJobIds_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _QueryJob_GetJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/job/job.protobuf",
}
