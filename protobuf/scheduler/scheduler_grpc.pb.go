// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scheduler

import (
	context "context"
	task "github.com/yoshida-lab/avalon/protobuf/task"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	InitFrom(ctx context.Context, in *task.TaskRoot, opts ...grpc.CallOption) (*task.Task, error)
	StepForward(ctx context.Context, in *SchedulerForwardReq, opts ...grpc.CallOption) (*SchedulerForwardRes, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) InitFrom(ctx context.Context, in *task.TaskRoot, opts ...grpc.CallOption) (*task.Task, error) {
	out := new(task.Task)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/InitFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StepForward(ctx context.Context, in *SchedulerForwardReq, opts ...grpc.CallOption) (*SchedulerForwardRes, error) {
	out := new(SchedulerForwardRes)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/StepForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	InitFrom(context.Context, *task.TaskRoot) (*task.Task, error)
	StepForward(context.Context, *SchedulerForwardReq) (*SchedulerForwardRes, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) InitFrom(context.Context, *task.TaskRoot) (*task.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFrom not implemented")
}
func (UnimplementedSchedulerServer) StepForward(context.Context, *SchedulerForwardReq) (*SchedulerForwardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StepForward not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_InitFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.TaskRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).InitFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/InitFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).InitFrom(ctx, req.(*task.TaskRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StepForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StepForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/StepForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StepForward(ctx, req.(*SchedulerForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitFrom",
			Handler:    _Scheduler_InitFrom_Handler,
		},
		{
			MethodName: "StepForward",
			Handler:    _Scheduler_StepForward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/scheduler/scheduler.protobuf",
}
