# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import scheduler_pb2 as scheduler__pb2
import task_pb2 as task__pb2


class SchedulerStub(object):
    """Missing associated documentation comment in .protobuf file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitFrom = channel.unary_unary(
            '/scheduler.Scheduler/InitFrom',
            request_serializer=task__pb2.TaskRoot.SerializeToString,
            response_deserializer=task__pb2.Task.FromString,
        )
        self.StepForward = channel.unary_unary(
            '/scheduler.Scheduler/StepForward',
            request_serializer=scheduler__pb2.SchedulerForwardReq.SerializeToString,
            response_deserializer=scheduler__pb2.SchedulerForwardRes.FromString,
        )


class SchedulerServicer(object):
    """Missing associated documentation comment in .protobuf file."""

    def InitFrom(self, request, context):
        """Missing associated documentation comment in .protobuf file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StepForward(self, request, context):
        """Missing associated documentation comment in .protobuf file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'InitFrom':
            grpc.unary_unary_rpc_method_handler(
                servicer.InitFrom,
                request_deserializer=task__pb2.TaskRoot.FromString,
                response_serializer=task__pb2.Task.SerializeToString,
            ),
        'StepForward':
            grpc.unary_unary_rpc_method_handler(
                servicer.StepForward,
                request_deserializer=scheduler__pb2.SchedulerForwardReq.FromString,
                response_serializer=scheduler__pb2.SchedulerForwardRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler('scheduler.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .protobuf file."""

    @staticmethod
    def InitFrom(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/InitFrom',
                                             task__pb2.TaskRoot.SerializeToString, task__pb2.Task.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def StepForward(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/StepForward',
                                             scheduler__pb2.SchedulerForwardReq.SerializeToString,
                                             scheduler__pb2.SchedulerForwardRes.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)
